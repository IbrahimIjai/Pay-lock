{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/paylock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\n\r\n/**\r\n * @title PayLock Protocol\r\n * @notice A protocol for secure service payments and escrow management using PYUSD\r\n */\r\ncontract PayLockProtocol is Ownable, ReentrancyGuard {\r\n\tusing EnumerableSet for EnumerableSet.UintSet;\r\n\tusing Counters for Counters.Counter;\r\n\r\n\tIERC20 public immutable PYUSD;\r\n\tCounters.Counter private _serviceIds;\r\n\tCounters.Counter private _transactionIds;\r\n\tuint256 public currentPYUSDRate; // Rate with 18 decimals (1e18 = 1 USDC)\r\n\taddress public rateUpdater;\r\n\r\n\t// Structs\r\n\tstruct SettlementDetails {\r\n\t\tuint256 pyusdAmount;\r\n\t\tuint256 pyusdRate; // Rate against USDC (e.g., 0.93 * 1e18)\r\n\t\tuint256 settlementTime;\r\n\t\tbool isSettled;\r\n\t}\r\n\r\n\tstruct Service {\r\n\t\taddress vendor;\r\n\t\tstring name;\r\n\t\tstring description;\r\n\t\tuint256 priceUSD; // Price in USD (with 18 decimals)\r\n\t\tbool isEscrow; // If true, requires confirmation before release\r\n\t\tbool isActive;\r\n\t\tSettlementDetails settlementDetails;\r\n\t}\r\n\r\n\tstruct Transaction {\r\n\t\tuint256 serviceId;\r\n\t\taddress client;\r\n\t\tTransactionStatus status;\r\n\t\tuint256 timestamp;\r\n\t\tstring encryptedAccessId; // Stored encrypted access ID (generated off-chain)\r\n\t}\r\n\r\n\tenum TransactionStatus {\r\n\t\tPENDING,\r\n\t\tPAID,\r\n\t\tCOMPLETED,\r\n\t\tDISPUTED,\r\n\t\tREFUNDED\r\n\t}\r\n\r\n\t// State Variables\r\n\tmapping(address => EnumerableSet.UintSet) private vendorServices;\r\n\tmapping(uint256 => Service) public services;\r\n\tmapping(uint256 => Transaction) public transactions;\r\n\tmapping(address => EnumerableSet.UintSet) private clientTransactions;\r\n\r\n\t// Events\r\n\tevent ServiceCreated(\r\n\t\tuint256 indexed serviceId,\r\n\t\taddress indexed vendor,\r\n\t\tstring name,\r\n\t\tuint256 priceUSD\r\n\t);\r\n\tevent ServiceUpdated(\r\n\t\tuint256 indexed serviceId,\r\n\t\tstring name,\r\n\t\tuint256 priceUSD\r\n\t);\r\n\tevent PaymentProcessed(\r\n\t\tuint256 indexed transactionId,\r\n\t\tuint256 indexed serviceId,\r\n\t\taddress indexed client\r\n\t);\r\n\tevent EscrowReleased(\r\n\t\tuint256 indexed transactionId,\r\n\t\taddress indexed vendor,\r\n\t\taddress indexed client\r\n\t);\r\n\tevent AccessIdGenerated(\r\n\t\tuint256 indexed transactionId,\r\n\t\tstring encryptedAccessId\r\n\t);\r\n\tevent DisputeRaised(uint256 indexed transactionId, address indexed client);\r\n\tevent DisputeResolved(uint256 indexed transactionId, bool refunded);\r\n\tevent PYUSDRateUpdated(uint256 payrate, uint256 timestamp);\r\n\r\n\t// Constructor\r\n\tconstructor(address _pyusd, address _rateUpdater) {\r\n\t\tPYUSD = IERC20(_pyusd);\r\n\t\trateUpdater = _rateUpdater;\r\n\t\tcurrentPYUSDRate = 1e18; // Initialize at 1:1\r\n\t}\r\n\r\n\t// Vendor Functions\r\n\tfunction createService(\r\n\t\tstring memory name,\r\n\t\tstring memory description,\r\n\t\tuint256 priceUSD,\r\n\t\tbool isEscrow\r\n\t) external returns (uint256) {\r\n\t\t_serviceIds.increment();\r\n\t\tuint256 newServiceId = _serviceIds.current();\r\n\r\n\t\tservices[newServiceId] = Service({\r\n\t\t\tvendor: msg.sender,\r\n\t\t\tname: name,\r\n\t\t\tdescription: description,\r\n\t\t\tpriceUSD: priceUSD,\r\n\t\t\tisEscrow: isEscrow,\r\n\t\t\tisActive: true,\r\n\t\t\tsettlementDetails: SettlementDetails({\r\n\t\t\t\tpyusdAmount: 0,\r\n\t\t\t\tpyusdRate: 0,\r\n\t\t\t\tsettlementTime: 0,\r\n\t\t\t\tisSettled: false\r\n\t\t\t})\r\n\t\t});\r\n\r\n\t\tvendorServices[msg.sender].add(newServiceId);\r\n\r\n\t\temit ServiceCreated(newServiceId, msg.sender, name, priceUSD);\r\n\t\treturn newServiceId;\r\n\t}\r\n\r\n\tfunction updateService(\r\n\t\tuint256 serviceId,\r\n\t\tstring memory name,\r\n\t\tstring memory description,\r\n\t\tuint256 priceUSD\r\n\t) external {\r\n\t\trequire(services[serviceId].vendor == msg.sender, \"Not service owner\");\r\n\t\trequire(services[serviceId].isActive, \"Service not active\");\r\n\r\n\t\tService storage service = services[serviceId];\r\n\t\tservice.name = name;\r\n\t\tservice.description = description;\r\n\t\tservice.priceUSD = priceUSD;\r\n\r\n\t\temit ServiceUpdated(serviceId, name, priceUSD);\r\n\t}\r\n\r\n\t// Payment Functions\r\n\tfunction processPayment(\r\n\t\tuint256 serviceId,\r\n\t\tuint256 pyusdAmount,\r\n\t\tuint256 currentPyusdRate,\r\n\t\tstring memory encryptedAccessId\r\n\t) external nonReentrant {\r\n\t\tService storage service = services[serviceId];\r\n\t\trequire(service.isActive, \"Service not active\");\r\n\t\trequire(pyusdAmount > 0, \"Invalid amount\");\r\n\r\n\t\t// Calculate required PYUSD amount based on USD price and current rate\r\n\t\tuint256 requiredPyusdAmount = calculatePYUSDAmount(service.priceUSD);\r\n\r\n\t\trequire(pyusdAmount >= requiredPyusdAmount, \"Insufficient payment\");\r\n\r\n\t\t// Process payment\r\n\t\trequire(\r\n\t\t\tPYUSD.transferFrom(msg.sender, address(this), pyusdAmount),\r\n\t\t\t\"Transfer failed\"\r\n\t\t);\r\n\r\n\t\t// Create transaction\r\n\t\t_transactionIds.increment();\r\n\t\tuint256 transactionId = _transactionIds.current();\r\n\r\n\t\ttransactions[transactionId] = Transaction({\r\n\t\t\tserviceId: serviceId,\r\n\t\t\tclient: msg.sender,\r\n\t\t\tstatus: TransactionStatus.PAID,\r\n\t\t\ttimestamp: block.timestamp,\r\n\t\t\tencryptedAccessId: encryptedAccessId\r\n\t\t});\r\n\r\n\t\tclientTransactions[msg.sender].add(transactionId);\r\n\r\n\t\t// If not escrow, release payment immediately\r\n\t\tif (!service.isEscrow) {\r\n\t\t\trequire(\r\n\t\t\t\tPYUSD.transfer(service.vendor, pyusdAmount),\r\n\t\t\t\t\"Transfer failed\"\r\n\t\t\t);\r\n\t\t\ttransactions[transactionId].status = TransactionStatus.COMPLETED;\r\n\t\t}\r\n\r\n\t\tservice.settlementDetails = SettlementDetails({\r\n\t\t\tpyusdAmount: pyusdAmount,\r\n\t\t\tpyusdRate: currentPyusdRate,\r\n\t\t\tsettlementTime: block.timestamp,\r\n\t\t\tisSettled: !service.isEscrow\r\n\t\t});\r\n\r\n\t\temit PaymentProcessed(transactionId, serviceId, msg.sender);\r\n\t\temit AccessIdGenerated(transactionId, encryptedAccessId);\r\n\t}\r\n\r\n\t// Escrow Functions\r\n\tfunction releaseEscrow(uint256 transactionId) external {\r\n\t\tTransaction storage txn = transactions[transactionId];\r\n\t\tService storage service = services[txn.serviceId];\r\n\r\n\t\trequire(msg.sender == service.vendor, \"Not vendor\");\r\n\t\trequire(txn.status == TransactionStatus.PAID, \"Invalid status\");\r\n\t\trequire(service.isEscrow, \"Not escrow service\");\r\n\r\n\t\trequire(\r\n\t\t\tPYUSD.transfer(\r\n\t\t\t\tservice.vendor,\r\n\t\t\t\tservice.settlementDetails.pyusdAmount\r\n\t\t\t),\r\n\t\t\t\"Transfer failed\"\r\n\t\t);\r\n\t\ttxn.status = TransactionStatus.COMPLETED;\r\n\t\tservice.settlementDetails.isSettled = true;\r\n\r\n\t\temit EscrowReleased(transactionId, service.vendor, txn.client);\r\n\t}\r\n\r\n\t// Verification Functions\r\n\tfunction verifyAccessId(\r\n\t\tuint256 transactionId,\r\n\t\tstring memory accessId\r\n\t) external view returns (bool) {\r\n\t\tTransaction storage txn = transactions[transactionId];\r\n\t\t// In production, implement proper verification logic\r\n\t\treturn\r\n\t\t\tkeccak256(abi.encodePacked(accessId)) ==\r\n\t\t\tkeccak256(abi.encodePacked(txn.encryptedAccessId));\r\n\t}\r\n\r\n\tfunction calculatePYUSDAmount(\r\n\t\tuint256 usdAmount\r\n\t) public view returns (uint256) {\r\n\t\t// usdAmount is in USD with 18 decimals\r\n\t\t// currentPYUSDRate is PYUSD/USDC rate with 18 decimals\r\n\t\t// Result should be in PYUSD with 6 decimals\r\n\r\n\t\t// Example:\r\n\t\t// If paying $100 USD and PYUSD = 0.93 USDC\r\n\t\t// usdAmount = 100 * 1e18\r\n\t\t// currentPYUSDRate = 0.93 * 1e18\r\n\t\t// Required PYUSD = (100 * 1e18) * 1e6 / (0.93 * 1e18)\r\n\r\n\t\tuint256 pyusdAmount = (usdAmount * 1e6) / currentPYUSDRate;\r\n\t\treturn pyusdAmount;\r\n\t}\r\n\r\n\t//Admin functions\r\n\r\n\tfunction updatePYUSDRate(uint256 newRate) external {\r\n\t\trequire(msg.sender == rateUpdater, \"Not authorized\");\r\n\t\trequire(newRate > 0, \"Invalid rate\");\r\n\t\tcurrentPYUSDRate = newRate;\r\n\t\temit PYUSDRateUpdated(newRate, block.timestamp);\r\n\t}\r\n\r\n\t// View Functions\r\n\tfunction getVendorServices(\r\n\t\taddress vendor\r\n\t) external view returns (uint256[] memory) {\r\n\t\tuint256 length = vendorServices[vendor].length();\r\n\t\tuint256[] memory result = new uint256[](length);\r\n\t\tfor (uint256 i = 0; i < length; i++) {\r\n\t\t\tresult[i] = EnumerableSet.at(vendorServices[vendor], i);\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tfunction getClientTransactions(\r\n\t\taddress client\r\n\t) external view returns (uint256[] memory) {\r\n\t\tuint256 length = clientTransactions[client].length();\r\n\t\tuint256[] memory result = new uint256[](length);\r\n\t\tfor (uint256 i = 0; i < length; i++) {\r\n\t\t\tresult[i] = EnumerableSet.at(clientTransactions[client], i);\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "metadata",
          "evm.methodIdentifiers",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "evmVersion": "paris",
    "metadata": {
      "useLiteralContent": true
    }
  }
}